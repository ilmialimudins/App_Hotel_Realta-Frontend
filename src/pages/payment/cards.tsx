import Layouts from "@/layouts/layout";
import {
  CreditCardOutlined,
  LeftOutlined,
  PlusCircleOutlined,
} from "@ant-design/icons";
import {
  Avatar,
  Button,
  Card,
  Carousel,
  Col,
  DatePicker,
  Empty,
  List,
  Row,
} from "antd";
import Head from "next/head";
import Link from "next/link";
import { useEffect, useState } from "react";
import AddCard from "./addCard";
import DetailCards from "./detailCard";
import DetailTransCards from "./detailTransCard";
import { useDispatch, useSelector } from "react-redux";
import {
  doTransactionRequest,
  doUsacRequest,
} from "@/Redux/Action/Payment/paymentDashAction";
import { doGetAllBank, doGetHistory } from "@/Redux/Action/Payment/paymentUserAction";
import { PaginationAlign, PaginationPosition } from "antd/es/pagination/Pagination";

export default function Cards() {
  const dispatch = useDispatch();
  const [isOpenAdd, setOpenAdd] = useState(false);
  const [isOpenDetCard, setOpenDetCard] = useState(false);
  const [isOpenDetTrans, setOpenDetTrans] = useState(false);
  const [confirmLoading, setConfirmLoading] = useState(false);
  const [msg, setMsg] = useState("");

  const { account, error } = useSelector(
    (state: any) => state.payUserAccReducer
  );
  const user = useSelector((state:any) => state.GetUserReducer.getUser)
  const {payBank, allBank} = useSelector((state:any) => state.payBankReducer)
  const { payDashTrx, total, currentPage, payHistoryTrx } = useSelector(
    (state: any) => state.payTrxHistoryReducer
  );

  useEffect(() => {
    dispatch(doGetHistory());
    dispatch(doGetAllBank())
  }, []);

  useEffect(() => {
    // user[0]?.role_name != "Guest" ? setIsAdmin(true) : setIsAdmin(false);
    dispatch(doUsacRequest(user[0]?.user_id));
  }, [user]);

  const dataHistory = payHistoryTrx?.filter(
    (obj: any) => obj.userId === user[0]?.user_id && obj.sourcePaymentName !== null && obj.sourcePaymentName !== 'H-Pay'
  )

  const bankAcc = account?.filter(
    (obj: any) => obj.usacType === "Credit Card" || obj.usacType === "Debet"
  );

  function maskCardNumber(cardNumber: number) {
    // Mengambil 4 digit terakhir
    const lastFourDigits = cardNumber.toString().slice(-4);
    // Mengganti semua digit, kecuali 4 digit terakhir, dengan karakter "*"
    const maskedDigits = cardNumber
      .toString()
      .slice(0, -4)
      .replace(/\d{4}/g, (str) => `${str} `)
      .replace(/\d/g, "*");
    // Menggabungkan digit yang telah diubah dengan 4 digit terakhir
    const maskedCardNumber = `${maskedDigits} ${lastFourDigits}`;
    return maskedCardNumber;
  }
  const handleOk = () => {
    setMsg("The modal will be closed after two seconds");
    setConfirmLoading(true);
    setTimeout(() => {
      setOpenAdd(false);
      setOpenDetCard(false);
      setOpenDetTrans(false);
      setConfirmLoading(false);
    }, 2000);
  };

  const handleCancel = () => {
    console.log("Clicked cancel button");
    setOpenAdd(false);
    setOpenDetCard(false);
    setOpenDetTrans(false);
  };



  const { RangePicker } = DatePicker;
  const handleDateChange = (value:any, dateString:any) => {
    // console.log("Selected Time: ", value);
    // console.log("Formatted Selected Time: ", dateString);
    dispatch(doGetHistory({startDate: dateString[0], endDate: dateString[1]}))
    // setDateRange(dateString);
  };

  const handleActive = (data: boolean) => {
    setOpenAdd(data)
  }
  const handleClose = (data: boolean) => {
    setOpenAdd(data)
  }

  const [position, setPosition] = useState<PaginationPosition>('bottom');
  const [align, setAlign] = useState<PaginationAlign>('end');
  return (
    <>
      <Head>
        <title>Hotel App - Payment</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/assets/Hotel_Icon.png" />
      </Head>
      <main>
        <Layouts>
          <div className="relative w-full h-52 drop-shadow-lg p-4 bg-[#4728ae] m-auto rounded-xl bg-center bg-cover bg-no-repeat mb-6">
            <div className="flex justify-between mb-8 items-center">
              <div className="flex justify-start">
                <Link href={"/payment"}>
                  <LeftOutlined className="text-lg mt-1 font-bold text-white mr-2" />
                </Link>
                <p className="text-lg text-white font-bold">My Cards</p>
              </div>
              <div>
                <Button
                  className="bg-white text-[#754cff] h-10 w-32 font-bold mr-4"
                  onClick={() => setOpenAdd(true)}
                >
                  <CreditCardOutlined />
                  Add Card
                </Button>
              </div>
            </div>
            <div className="flex overflow-x-auto pb-8 overflow-hidden">
              <div className="flex flex-nowrap lg:ml-40 md:ml-20  ">
                {bankAcc.map((item: any) => (
                  <div className="inline-block px-3">
                    <div className="w-96 h-56 m-auto bg-red-100 rounded-xl relative text-white shadow-xl transition-transform transform hover:scale-95">
                      <img
                        className="relative object-cover w-full h-full rounded-xl"
                        src={
                          item.usacType == "Debet"
                            ? "https://i.imgur.com/kGkSg1v.png"
                            : "https://i.imgur.com/Zi6v09P.png"
                        }
                      />

                      <div className="w-full px-8 absolute top-8">
                        <div className="flex justify-between">
                          <div className="">
                            <p className="font-semiBold text-lg">{allBank.find((obj:any) => obj.bankEntityId == item.usacEntityId)?.bankName}</p>
                          </div>
                          <p className="font-semibold text-lg">
                            {item.usacType}
                          </p>
                        </div>
                        <div className="pt-8">
                          <p className="font-medium tracking-more-wider text-3xl">
                            {maskCardNumber(item.usacAccountNumber)}
                          </p>
                        </div>
                        <div className="mt-8">
                          <div className="flex justify-between">
                            <div className="">
                              <p className="font-light text-xs">Exp :</p>
                              <p className="font-medium tracking-wider text-sm">
                                {`${item.usacExpmonth}/${item.usacExpyear}`}
                              </p>
                            </div>
                            <div className="min-w-[120px]">
                              <p className="font-light text-xs">
                                Balance :
                              </p>
                              <p className="font-medium tracking-wider text-sm">
                                {parseInt(item.usacSaldo).toLocaleString(
                                  "id-ID",
                                  {
                                    style: "currency",
                                    currency: "IDR",
                                    minimumFractionDigits: 0,
                                    maximumFractionDigits: 0,
                                  }
                                )}
                              </p>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
          {isOpenAdd ? (
            <AddCard
              show={isOpenAdd}
              clickOk={handleOk}
              clickCancel={handleCancel}
              handleAct={handleActive}
              handleCancell={handleClose}
              dataUser={user}
              dataBank={payBank}
            />
          ) : null}
          {isOpenDetCard ? (
            <DetailCards
              show={isOpenDetCard}
              clickOk={handleOk}
              clickCancel={handleCancel}
            />
          ) : null}
          {isOpenDetTrans ? (
            <DetailTransCards
              show={isOpenDetTrans}
              clickOk={handleOk}
              clickCancel={handleCancel}
            />
          ) : null}

          <div className="mt-32 mb-6 drop-shadow-lg m-auto border-b-md rounded-md ">
            <div className="flex justify-between p-6 bg-white rounded-lg">
              <p className="text-lg font-semibold text-[#252525]">
                History Transaction
              </p>
              <RangePicker format={'DD MMM YYYY'} onChange={handleDateChange}/>
            </div>
            <List
              className="pb-4"
              dataSource={dataHistory}
              pagination={{ position, align,pageSize:5 }}
              renderItem={(item:any) => (
                <Card
                  title={item.transactionNumber}
                  extra={item.trxDate?.split("T")[0]}
                  className="mb-1 mt-2 w-full"
                >
                  <div>
                    <div className="flex justify-between">
                      <p className="font-bold text-lg">
                        {item.transactionNote}
                      </p>
                      {item.debit != 0 ? (
                        <p className="text-md text-green-600 font-semibold">
                          {parseInt(item.debit).toLocaleString("id-ID", {
                            style: "currency",
                            currency: "IDR",
                            minimumFractionDigits: 0,
                            maximumFractionDigits: 0,
                          })}
                        </p>
                      ) : (
                        <p className="text-md text-red-600 font-semibold">
                          {parseInt(item.credit).toLocaleString("id-ID", {
                            style: "currency",
                            currency: "IDR",
                            minimumFractionDigits: 0,
                            maximumFractionDigits: 0,
                          })}
                        </p>
                      )}
                    </div>
                    <div className="flex justify-between">
                      <p className="text-md">
                        {item.orderNumber ? item.orderNumber : "H-Pay"}
                      </p>
                      <p className="text-md font-semibold">
                        {item.sourcePaymentName == null
                          ? "Cash"
                          : item.sourcePaymentName}
                      </p>
                    </div>
                  </div>
                </Card>
              )}

            >
            </List>
          </div>
        </Layouts>
      </main>
    </>
  );
}
