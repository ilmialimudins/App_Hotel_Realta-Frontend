import Layouts from "@/layouts/layout";
import {
  LeftOutlined,
  RightOutlined,
  SettingFilled,
  SettingOutlined,
} from "@ant-design/icons";
import { Button, Card, DatePicker, Empty, List, Tooltip } from "antd";
import Head from "next/head";
import Link from "next/link";
import { use, useEffect, useState } from "react";
import TopUp from "./topup";
import DetailTransHpay from "./detailTransHpay";
import { useDispatch, useSelector } from "react-redux";
import { doTransactionRequest } from "@/Redux/Action/Payment/paymentDashAction";
import { doGetHistory } from "@/Redux/Action/Payment/paymentUserAction";
import {
  PaginationAlign,
  PaginationPosition,
} from "antd/es/pagination/Pagination";
import Buttons from "@/components/Button";
import ChangePin from "./changePin";

export default function hpay() {
  const addIcon = (
    <svg
      stroke-width="0"
      fill="#FFF"
      width="24"
      height="24"
      stroke="currentColor"
      stroke-linecap="round"
      viewBox="0 0 24 24"
      xmlns="http://www.w3.org/2000/svg"
      xmlnsXlink="http://www.w3.org/1999/xlink"
    >
      <g fill="none" fill-rule="evenodd">
        <path d="M0 0h24v24H0z"></path>
        <path
          stroke="#FFF"
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M3 14V6a2 2 0 0 1 2-2h14v4h2v10a2 2 0 0 1-2 2h-8"
        ></path>
        <path
          stroke="#FFF"
          stroke-width="2"
          d="M14 12h7v4h-7a2 2 0 1 1 0-4z"
        ></path>
        <path
          stroke="#FFF"
          stroke-linecap="round"
          stroke-width="2"
          d="M6 8h13M6 15v6M3 18h6"
        ></path>
      </g>
    </svg>
  );

  const dispacth = useDispatch();
  const [isOpenTP, setOpenTP] = useState(false);
  const [isOpenDetail, setOpenDetail] = useState(false);
  const [changePin, setChangePin] = useState(false);
  const [confirmLoading, setConfirmLoading] = useState(false);
  const [msg, setMsg] = useState("");

  const { account, error } = useSelector(
    (state: any) => state.payUserAccReducer
  );

  const { payDashTrx, total, currentPage, payHistoryTrx } = useSelector(
    (state: any) => state.payTrxHistoryReducer
  );

  useEffect(() => {
    dispacth(doGetHistory());
  }, []);
  const user = useSelector((state: any) => state.GetUserReducer.getUser);
  const accNumber = `131${user[0]?.user_phone_number}`;

  const dataHistory = payHistoryTrx?.filter(
    (obj: any) =>
      (obj.userId === user[0]?.user_id &&
        obj.sourcePaymentName !== null &&
        obj.sourceNumber == accNumber) ||
      obj.targetNumber == accNumber
  );

  //Filter Account Number untuk mencari account number H-Pay
  const bankAcc = account?.filter(
    (obj: any) => obj.usacType === "Credit Card" || obj.usacType === "Debet"
  );
  const fintechAcc = account?.filter((obj: any) => obj.usacType === "Payment");
  const acc = fintechAcc?.find(
    (item: any) => item.usacAccountNumber == accNumber
  );

  //Variabel Saldo H-Pay
  const saldo = parseInt(acc?.usacSaldo).toLocaleString("id-ID", {
    style: "currency",
    currency: "IDR",
    minimumFractionDigits: 0,
    maximumFractionDigits: 0,
  });
  const handleOk = () => {
    setMsg("The modal will be closed after two seconds");
    setConfirmLoading(true);
    setTimeout(() => {
      setOpenTP(false);
      setOpenDetail(false);
      setConfirmLoading(false);
      setChangePin(false)
    }, 2000);
  };

  const handleCancel = () => {
    console.log("Clicked cancel button");
    setOpenTP(false);
    setOpenDetail(false);
    setChangePin(false)
  };

  const handleClose = (data: boolean) => {
    setOpenTP(data);
    setChangePin(data)
  };

  const { RangePicker } = DatePicker;
  const handleDateChange = (value: any, dateString: any) => {
    // console.log("Selected Time: ", value);
    // console.log("Formatted Selected Time: ", dateString);
    dispacth(
      doGetHistory({ startDate: dateString[0], endDate: dateString[1] })
    );
    // setDateRange(dateString);
  };

  const [position, setPosition] = useState<PaginationPosition>("bottom");
  const [align, setAlign] = useState<PaginationAlign>("end");

  return (
    <>
      <Head>
        <title>Hotel App - Payment</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/assets/Hotel_Icon.png" />
      </Head>
      <main>
        <Layouts>
          <div className="relative w-full h-48 drop-shadow-lg p-4 bg-[#4728ae] m-auto rounded-xl bg-center bg-cover bg-no-repeat mb-6">
            <div className="flex justify-start items-center mb-8">
              <Link href={"/payment"}>
                <LeftOutlined className="text-md font-semibold pt-1 text-white mr-4" />
              </Link>
              <p className="text-lg text-white font-bold">H-Pay Balance</p>
            </div>
            <div className="w-2/4 h-36 mt-4 m-auto p-6 bg-white rounded-lg">
              <div className="">
                <div className="flex justify-between items-center">
                  <p className="text-lg font-semibold">Balance</p>
                  <div className="h-10 w-24 flex items-center mr-8 gap-x-2">
                    <Button
                      className="bg-[#4728ae] text-white px-4 flex"
                      onClick={() => {
                        setOpenTP(true);
                      }}
                    >
                      {addIcon}
                      <p className="ml-2 text-md hover:text-white"> Top Up </p>
                    </Button>
                    <Tooltip title="Change PIN">
                      <SettingFilled
                        className="text-[#754cff] font-bold hover:cursor-pointer"
                        onClick={() => setChangePin(true)}
                      />
                    </Tooltip>
                  </div>
                </div>
                <p className="text-3xl mt-2 font-bold">{saldo}</p>
              </div>
            </div>
          </div>

          <div className="mt-16 mb-6 drop-shadow-lg m-auto border-b-md rounded-md ">
            <div className="flex justify-between p-6 bg-white rounded-lg">
              <p className="text-lg font-semibold text-[#252525]">
                History Transaction
              </p>
              <RangePicker format={"DD MMM YYYY"} onChange={handleDateChange} />
            </div>
            <List
              className="pb-4"
              dataSource={dataHistory}
              pagination={{ position, align, pageSize: 5 }}
              renderItem={(item: any) => (
                <Card
                  title={item.transactionNumber}
                  extra={item.trxDate?.split("T")[0]}
                  className="mb-1 mt-2 w-full"
                >
                  <div>
                    <div className="flex justify-between">
                      <p className="font-bold text-lg">
                        {item.transactionNote}
                      </p>
                      {item.debit != 0 ? (
                        <p className="text-md text-green-600 font-semibold">
                          {parseInt(item.debit).toLocaleString("id-ID", {
                            style: "currency",
                            currency: "IDR",
                            minimumFractionDigits: 0,
                            maximumFractionDigits: 0,
                          })}
                        </p>
                      ) : (
                        <p className="text-md text-red-600 font-semibold">
                          {parseInt(item.credit).toLocaleString("id-ID", {
                            style: "currency",
                            currency: "IDR",
                            minimumFractionDigits: 0,
                            maximumFractionDigits: 0,
                          })}
                        </p>
                      )}
                    </div>
                    <div className="flex justify-between">
                      <p className="text-md">
                        {item.orderNumber ? item.orderNumber : "H-Pay"}
                      </p>
                      <p className="text-md font-semibold">
                        {item.sourcePaymentName == null
                          ? "Cash"
                          : item.sourcePaymentName}
                      </p>
                    </div>
                  </div>
                </Card>
              )}
            ></List>
          </div>
          {isOpenTP && (
            <TopUp
              show={isOpenTP}
              clickOk={handleOk}
              clickCancel={handleCancel}
              dataUser={user}
              phone={accNumber}
              card={bankAcc}
              handleCancell={handleClose}
            />
          )}
          {isOpenDetail ? (
            <DetailTransHpay
              show={isOpenDetail}
              clickOk={handleOk}
              clickCancel={handleCancel}
            />
          ) : null}
          {changePin && (
            <ChangePin
              show={changePin}
              clickOk={handleOk}
              clickCancel={handleCancel}
              dataUser={user}
              handleCancell={handleClose}
            />
          )}
        </Layouts>
      </main>
    </>
  );
}
